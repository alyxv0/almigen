#!/usr/bin/env python

from getopt import getopt
from requests import get
from collections import defaultdict

import argparse

ARCH_LINUX_MIRRORLIST_URL = "https://archlinux.org/mirrorlist/"

request_param = defaultdict(list)
outfile = ""

def argparse_parse_options():
    global parameters
    global outfile
    
    parser = argparse.ArgumentParser(
        prog="almigen",
        description='## Arch Linux CLI Mirrorlist Generator',
        epilog=""
    )

    parser.add_argument('-p', '--protocol', help="commata separated list: http,https")
    parser.add_argument('-c', '--country', help="country code: i.e. US")
    parser.add_argument('-4', '--ipv4', action='store_true', help="list servers with ipv4 support")
    parser.add_argument('-6', '--ipv6', action='store_true', help="list servers with ipv6 support")
    parser.add_argument('outfile', nargs='?', help="file to write the mirror list (if empty, stdout is used)")

    args = parser.parse_args()

    if args.country == None:
        parser.print_help()
        print(f"{"\n" * 2}error, invalid args: specify at least a county code")
        exit()

    if args.ipv4 != None:
        request_param["ip_version"].append('4')
    elif args.ipv6 != None:
        request_param["ip_version"].append('6')
    elif args.protocol != None:
        for p in str(args.protocol).split(','):
            request_param["protocol"].append(p)
    if args.country != None:
        request_param["country"].append(args.country) 

    if args.outfile == None:
        outfile = None
    else:
        outfile = args[0]


if __name__ == "__main__":
    
    # parse args
    argparse_parse_options()

    # send get request
    mirrorlist_request = get(ARCH_LINUX_MIRRORLIST_URL, params=request_param)
    
    # write if positional argument is found
    # otherwise print to stdout
    if outfile != None:
        with open(outfile, "w") as f:
            f.write(mirrorlist_request.text)
    else:
        print(mirrorlist_request.text, end='')